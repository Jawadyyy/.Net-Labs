@page "/player/{PlayerId:int}"
@using HoopMetrics.Models
@using HoopMetrics.Services
@rendermode InteractiveServer
@inject IPlayerService PlayerService
@inject NavigationManager NavigationManager

@if (currentPlayer == null)
{
    <div class="player-not-selected">
        <div class="alert alert-warning">
            Player not found or not selected.
        </div>
        <button class="btn btn-outline-primary" @onclick="NavigateBack">
            Back to Player List
        </button>
    </div>
}
else
{
    <div class="player-stats-container">
        <div class="player-header">
            <button class="btn btn-outline-secondary back-button" @onclick="NavigateBack">
                &larr; Back
            </button>
            <div class="player-info">
                <div class="player-image-container">
                    <img src="@currentPlayer.ImageUrl" class="player-image" alt="@currentPlayer.Name" />
                </div>
                <div class="player-details">
                    <h2>@currentPlayer.Name</h2>
                    <div class="player-meta">
                        <span class="badge bg-primary">@currentPlayer.Position</span>
                        <span class="badge bg-secondary">Age: @currentPlayer.Age</span>
                        <span class="badge bg-info">
                            <span class="flag-icon flag-icon-@GetCountryCode(currentPlayer.Nationality)"></span>
                            @currentPlayer.Nationality
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="stats-grid">
            <PerformanceStats Player="currentPlayer" />
            <FitnessStats Player="currentPlayer" />
            <InjuryStats Player="currentPlayer" />
        </div>
    </div>
}

<style>
    .player-image-container {
        margin-right: 20px;
    }

    .player-image {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid #fff;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .player-info {
        display: flex;
        align-items: center;
    }

    .player-details {
        flex: 1;
    }
</style>

@code {
    private Player currentPlayer;

    [Parameter]
    public int PlayerId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (PlayerId > 0)
        {
            currentPlayer = await PlayerService.GetPlayerByIdAsync(PlayerId);
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetCountryCode(string nationality)
    {
        var countryCodes = new Dictionary<string, string>
        {
            {"USA", "us"},
            {"Greece", "gr"},
            {"Slovenia", "si"},
            {"Cameroon", "cm"},
            {"Serbia", "rs"}
        };

        return countryCodes.TryGetValue(nationality, out var code) ? code : "us";
    }
}